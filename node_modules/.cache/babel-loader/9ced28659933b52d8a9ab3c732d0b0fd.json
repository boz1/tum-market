{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _PageView = require('./PageView');\n\nvar _PageView2 = _interopRequireDefault(_PageView);\n\nvar _BreakView = require('./BreakView');\n\nvar _BreakView2 = _interopRequireDefault(_BreakView);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar PaginationBoxView = function (_Component) {\n  _inherits(PaginationBoxView, _Component);\n\n  function PaginationBoxView(props) {\n    _classCallCheck(this, PaginationBoxView);\n\n    var _this = _possibleConstructorReturn(this, (PaginationBoxView.__proto__ || Object.getPrototypeOf(PaginationBoxView)).call(this, props));\n\n    _this.handlePreviousPage = function (evt) {\n      var selected = _this.state.selected;\n      evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;\n\n      if (selected > 0) {\n        _this.handlePageSelected(selected - 1, evt);\n      }\n    };\n\n    _this.handleNextPage = function (evt) {\n      var selected = _this.state.selected;\n      var pageCount = _this.props.pageCount;\n      evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;\n\n      if (selected < pageCount - 1) {\n        _this.handlePageSelected(selected + 1, evt);\n      }\n    };\n\n    _this.handlePageSelected = function (selected, evt) {\n      evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;\n      if (_this.state.selected === selected) return;\n\n      _this.setState({\n        selected: selected\n      }); // Call the callback with the new selected item:\n\n\n      _this.callCallback(selected);\n    };\n\n    _this.handleBreakClick = function (index, evt) {\n      evt.preventDefault ? evt.preventDefault() : evt.returnValue = false;\n      var selected = _this.state.selected;\n\n      _this.handlePageSelected(selected < index ? _this.getForwardJump() : _this.getBackwardJump(), evt);\n    };\n\n    _this.callCallback = function (selectedItem) {\n      if (typeof _this.props.onPageChange !== 'undefined' && typeof _this.props.onPageChange === 'function') {\n        _this.props.onPageChange({\n          selected: selectedItem\n        });\n      }\n    };\n\n    _this.pagination = function () {\n      var items = [];\n      var _this$props = _this.props,\n          pageRangeDisplayed = _this$props.pageRangeDisplayed,\n          pageCount = _this$props.pageCount,\n          marginPagesDisplayed = _this$props.marginPagesDisplayed,\n          breakLabel = _this$props.breakLabel,\n          breakClassName = _this$props.breakClassName,\n          breakLinkClassName = _this$props.breakLinkClassName;\n      var selected = _this.state.selected;\n\n      if (pageCount <= pageRangeDisplayed) {\n        for (var index = 0; index < pageCount; index++) {\n          items.push(_this.getPageElement(index));\n        }\n      } else {\n        var leftSide = pageRangeDisplayed / 2;\n        var rightSide = pageRangeDisplayed - leftSide; // If the selected page index is on the default right side of the pagination,\n        // we consider that the new right side is made up of it (= only one break element).\n        // If the selected page index is on the default left side of the pagination,\n        // we consider that the new left side is made up of it (= only one break element).\n\n        if (selected > pageCount - pageRangeDisplayed / 2) {\n          rightSide = pageCount - selected;\n          leftSide = pageRangeDisplayed - rightSide;\n        } else if (selected < pageRangeDisplayed / 2) {\n          leftSide = selected;\n          rightSide = pageRangeDisplayed - leftSide;\n        }\n\n        var _index = void 0;\n\n        var page = void 0;\n        var breakView = void 0;\n\n        var createPageView = function createPageView(index) {\n          return _this.getPageElement(index);\n        };\n\n        for (_index = 0; _index < pageCount; _index++) {\n          page = _index + 1; // If the page index is lower than the margin defined,\n          // the page has to be displayed on the left side of\n          // the pagination.\n\n          if (page <= marginPagesDisplayed) {\n            items.push(createPageView(_index));\n            continue;\n          } // If the page index is greater than the page count\n          // minus the margin defined, the page has to be\n          // displayed on the right side of the pagination.\n\n\n          if (page > pageCount - marginPagesDisplayed) {\n            items.push(createPageView(_index));\n            continue;\n          } // If the page index is near the selected page index\n          // and inside the defined range (pageRangeDisplayed)\n          // we have to display it (it will create the center\n          // part of the pagination).\n\n\n          if (_index >= selected - leftSide && _index <= selected + rightSide) {\n            items.push(createPageView(_index));\n            continue;\n          } // If the page index doesn't meet any of the conditions above,\n          // we check if the last item of the current \"items\" array\n          // is a break element. If not, we add a break element, else,\n          // we do nothing (because we don't want to display the page).\n\n\n          if (breakLabel && items[items.length - 1] !== breakView) {\n            breakView = _react2.default.createElement(_BreakView2.default, {\n              key: _index,\n              breakLabel: breakLabel,\n              breakClassName: breakClassName,\n              breakLinkClassName: breakLinkClassName,\n              onClick: _this.handleBreakClick.bind(null, _index)\n            });\n            items.push(breakView);\n          }\n        }\n      }\n\n      return items;\n    };\n\n    var initialSelected = void 0;\n\n    if (props.initialPage) {\n      initialSelected = props.initialPage;\n    } else if (props.forcePage) {\n      initialSelected = props.forcePage;\n    } else {\n      initialSelected = 0;\n    }\n\n    _this.state = {\n      selected: initialSelected\n    };\n    return _this;\n  }\n\n  _createClass(PaginationBoxView, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          initialPage = _props.initialPage,\n          disableInitialCallback = _props.disableInitialCallback,\n          extraAriaContext = _props.extraAriaContext; // Call the callback with the initialPage item:\n\n      if (typeof initialPage !== 'undefined' && !disableInitialCallback) {\n        this.callCallback(initialPage);\n      }\n\n      if (extraAriaContext) {\n        console.warn('DEPRECATED (react-paginate): The extraAriaContext prop is deprecated. You should now use the ariaLabelBuilder instead.');\n      }\n    }\n  }, {\n    key: 'UNSAFE_componentWillReceiveProps',\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (typeof nextProps.forcePage !== 'undefined' && this.props.forcePage !== nextProps.forcePage) {\n        this.setState({\n          selected: nextProps.forcePage\n        });\n      }\n    }\n  }, {\n    key: 'getForwardJump',\n    value: function getForwardJump() {\n      var selected = this.state.selected;\n      var _props2 = this.props,\n          pageCount = _props2.pageCount,\n          pageRangeDisplayed = _props2.pageRangeDisplayed;\n      var forwardJump = selected + pageRangeDisplayed;\n      return forwardJump >= pageCount ? pageCount - 1 : forwardJump;\n    }\n  }, {\n    key: 'getBackwardJump',\n    value: function getBackwardJump() {\n      var selected = this.state.selected;\n      var pageRangeDisplayed = this.props.pageRangeDisplayed;\n      var backwardJump = selected - pageRangeDisplayed;\n      return backwardJump < 0 ? 0 : backwardJump;\n    }\n  }, {\n    key: 'hrefBuilder',\n    value: function hrefBuilder(pageIndex) {\n      var _props3 = this.props,\n          hrefBuilder = _props3.hrefBuilder,\n          pageCount = _props3.pageCount;\n\n      if (hrefBuilder && pageIndex !== this.state.selected && pageIndex >= 0 && pageIndex < pageCount) {\n        return hrefBuilder(pageIndex + 1);\n      }\n    }\n  }, {\n    key: 'ariaLabelBuilder',\n    value: function ariaLabelBuilder(pageIndex) {\n      var selected = pageIndex === this.state.selected;\n\n      if (this.props.ariaLabelBuilder && pageIndex >= 0 && pageIndex < this.props.pageCount) {\n        var label = this.props.ariaLabelBuilder(pageIndex + 1, selected); // DEPRECATED: The extraAriaContext prop was used to add additional context\n        // to the aria-label. Users should now use the ariaLabelBuilder instead.\n\n        if (this.props.extraAriaContext && !selected) {\n          label = label + ' ' + this.props.extraAriaContext;\n        }\n\n        return label;\n      }\n    }\n  }, {\n    key: 'getPageElement',\n    value: function getPageElement(index) {\n      var selected = this.state.selected;\n      var _props4 = this.props,\n          pageClassName = _props4.pageClassName,\n          pageLinkClassName = _props4.pageLinkClassName,\n          activeClassName = _props4.activeClassName,\n          activeLinkClassName = _props4.activeLinkClassName,\n          extraAriaContext = _props4.extraAriaContext;\n      return _react2.default.createElement(_PageView2.default, {\n        key: index,\n        onClick: this.handlePageSelected.bind(null, index),\n        selected: selected === index,\n        pageClassName: pageClassName,\n        pageLinkClassName: pageLinkClassName,\n        activeClassName: activeClassName,\n        activeLinkClassName: activeLinkClassName,\n        extraAriaContext: extraAriaContext,\n        href: this.hrefBuilder(index),\n        ariaLabel: this.ariaLabelBuilder(index),\n        page: index + 1\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props5 = this.props,\n          disabledClassName = _props5.disabledClassName,\n          previousClassName = _props5.previousClassName,\n          nextClassName = _props5.nextClassName,\n          pageCount = _props5.pageCount,\n          containerClassName = _props5.containerClassName,\n          previousLinkClassName = _props5.previousLinkClassName,\n          previousLabel = _props5.previousLabel,\n          nextLinkClassName = _props5.nextLinkClassName,\n          nextLabel = _props5.nextLabel;\n      var selected = this.state.selected;\n      var previousClasses = previousClassName + (selected === 0 ? ' ' + disabledClassName : '');\n      var nextClasses = nextClassName + (selected === pageCount - 1 ? ' ' + disabledClassName : '');\n      var previousAriaDisabled = selected === 0 ? 'true' : 'false';\n      var nextAriaDisabled = selected === pageCount - 1 ? 'true' : 'false';\n      return _react2.default.createElement('ul', {\n        className: containerClassName\n      }, _react2.default.createElement('li', {\n        className: previousClasses\n      }, _react2.default.createElement('a', {\n        onClick: this.handlePreviousPage,\n        className: previousLinkClassName,\n        href: this.hrefBuilder(selected - 1),\n        tabIndex: '0',\n        role: 'button',\n        onKeyPress: this.handlePreviousPage,\n        'aria-disabled': previousAriaDisabled\n      }, previousLabel)), this.pagination(), _react2.default.createElement('li', {\n        className: nextClasses\n      }, _react2.default.createElement('a', {\n        onClick: this.handleNextPage,\n        className: nextLinkClassName,\n        href: this.hrefBuilder(selected + 1),\n        tabIndex: '0',\n        role: 'button',\n        onKeyPress: this.handleNextPage,\n        'aria-disabled': nextAriaDisabled\n      }, nextLabel)));\n    }\n  }]);\n\n  return PaginationBoxView;\n}(_react.Component);\n\nPaginationBoxView.propTypes = {\n  pageCount: _propTypes2.default.number.isRequired,\n  pageRangeDisplayed: _propTypes2.default.number.isRequired,\n  marginPagesDisplayed: _propTypes2.default.number.isRequired,\n  previousLabel: _propTypes2.default.node,\n  nextLabel: _propTypes2.default.node,\n  breakLabel: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),\n  hrefBuilder: _propTypes2.default.func,\n  onPageChange: _propTypes2.default.func,\n  initialPage: _propTypes2.default.number,\n  forcePage: _propTypes2.default.number,\n  disableInitialCallback: _propTypes2.default.bool,\n  containerClassName: _propTypes2.default.string,\n  pageClassName: _propTypes2.default.string,\n  pageLinkClassName: _propTypes2.default.string,\n  activeClassName: _propTypes2.default.string,\n  activeLinkClassName: _propTypes2.default.string,\n  previousClassName: _propTypes2.default.string,\n  nextClassName: _propTypes2.default.string,\n  previousLinkClassName: _propTypes2.default.string,\n  nextLinkClassName: _propTypes2.default.string,\n  disabledClassName: _propTypes2.default.string,\n  breakClassName: _propTypes2.default.string,\n  breakLinkClassName: _propTypes2.default.string,\n  extraAriaContext: _propTypes2.default.string,\n  ariaLabelBuilder: _propTypes2.default.func\n};\nPaginationBoxView.defaultProps = {\n  pageCount: 10,\n  pageRangeDisplayed: 2,\n  marginPagesDisplayed: 3,\n  activeClassName: 'selected',\n  previousClassName: 'previous',\n  nextClassName: 'next',\n  previousLabel: 'Previous',\n  nextLabel: 'Next',\n  breakLabel: '...',\n  disabledClassName: 'disabled',\n  disableInitialCallback: false\n};\nexports.default = PaginationBoxView;","map":null,"metadata":{},"sourceType":"script"}